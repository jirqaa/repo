<?xml version="1.0"?>

<st-source>
<time-stamp>From VisualWorksÂ® NonCommercial, 7.4.1 of May 30, 2006 on May 2, 2024 at 7:05:25 pm</time-stamp>


<class>
<name>Osoba</name>
<environment>Smalltalk</environment>
<super>DaskalosDataObject</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>jmeno prijmeni </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>DaskalosUserClasses</category>
<attributes>
<package>DaskalosUserClasses</package>
</attributes>
</class>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<methods>
<class-id>Osoba class</class-id> <category>instance variables behavior</category>

<body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes
"resource for Daskalos"
^((Core.Dictionary new) add: (#jmeno -&gt; Core.String); add: (#prijmeni -&gt; Core.String); yourself)</body>
</methods>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<comment>
<class-id>Osoba</class-id>
<body>Tato trida je vyuzita aby svym potomkum "Zamestnanec" a "Zakaznik" predala instancni promenne "jmeno" a "prijmeni".</body>
</comment>

<methods>
<class-id>Osoba</class-id> <category>accessing</category>

<body package="DaskalosUserClasses" selector="jmeno">jmeno
"generated by Daskalos"

     ^jmeno</body>

<body package="DaskalosUserClasses" selector="jmeno:">jmeno: anObject
"generated by Daskalos"

     jmeno := (self checkValue: anObject forVariable: #jmeno)</body>

<body package="DaskalosUserClasses" selector="prijmeni">prijmeni
"generated by Daskalos"

     ^prijmeni</body>

<body package="DaskalosUserClasses" selector="prijmeni:">prijmeni: anObject
"generated by Daskalos"

     prijmeni := (self checkValue: anObject forVariable: #prijmeni)</body>
</methods>

<methods>
<class-id>Osoba</class-id> <category>instance initialization</category>

<body package="DaskalosUserClasses" selector="initialize">initialize
"generated by Daskalos"

     super initialize.
     jmeno := nil.
     prijmeni := nil.
</body>
</methods>


<class>
<name>Zamestnanec</name>
<environment>Smalltalk</environment>
<super>Osoba</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>pozice </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>DaskalosUserClasses</category>
<attributes>
<package>DaskalosUserClasses</package>
</attributes>
</class>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<methods>
<class-id>Zamestnanec class</class-id> <category>instance variables behavior</category>

<body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes
"resource for Daskalos"
^((Core.Dictionary new) add: (#pozice -&gt; Core.String); add: (#jmeno -&gt; Core.String); add: (#prijmeni -&gt; Core.String); yourself)</body>
</methods>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<comment>
<class-id>Zamestnanec</class-id>
<body>Tato trida dedi od tridy "Osoba" instancni promenne "jmeno" a "prijmeni" kvuli identifikaci v praci a dale ma instancni promennou "pozice", ktera zamestnancum pote pomoci metody "prava" prideluje opravneni k ruznym vecem.</body>
</comment>

<methods>
<class-id>Zamestnanec</class-id> <category>accessing</category>

<body package="DaskalosUserClasses" selector="pozice">pozice
"generated by Daskalos"

     ^pozice</body>

<body package="DaskalosUserClasses" selector="pozice:">pozice: anObject
"generated by Daskalos"

     pozice := (self checkValue: anObject forVariable: #pozice)</body>
</methods>

<methods>
<class-id>Zamestnanec</class-id> <category>instance initialization</category>

<body package="DaskalosUserClasses" selector="initialize">initialize
"generated by Daskalos"

     super initialize.
     pozice := nil.
</body>
</methods>

<methods>
<class-id>Zamestnanec</class-id> <category>other methods</category>

<body package="DaskalosUserClasses" selector="prava">prava
	pozice = 'Web Specialist' ifTrue: [^'uprava stranek'].
	pozice = 'CEO' ifTrue: [^'vsechna'].
	pozice = 'Personalistka' 
		ifTrue: [^'pristup k datum zamestnancu a zakazniku + prace se smlouvami'].
	pozice = 'IT' 
		ifTrue: [^'sprava firemnich pristroju (servery, pracovni PC, ...)'].
	pozice = 'Manazerka' 
		ifTrue: 
			[^'pristup k datum zamnestnancu a prodeje zbozi + rozvrzeni pracovni doby + pridelovani ukolu'].
	pozice = 'Pracovnik skladu' ifTrue: [^'manipulace se zbozim']</body>
</methods>


<class>
<name>Zakaznik</name>
<environment>Smalltalk</environment>
<super>Osoba</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>adresa objednavky </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>DaskalosUserClasses</category>
<attributes>
<package>DaskalosUserClasses</package>
</attributes>
</class>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<methods>
<class-id>Zakaznik class</class-id> <category>instance variables behavior</category>

<body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes
"resource for Daskalos"
^((Core.Dictionary new) add: (#objednavky -&gt; Core.Set); add: (#adresa -&gt; Core.String); add: (#prijmeni -&gt; Core.String); add: (#jmeno -&gt; Core.String); yourself)</body>
</methods>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<comment>
<class-id>Zakaznik</class-id>
<body>Tato trida dedi od tridy "Osoba" instancni promenne "jmeno" a "prijmeni" kvuli spravne identifikaci (tyto promenne dale spojuje pro jednodussi vyuziti metoda "celeJmeno"), dale ma instancni promennou "adresa" z duvodu dopravy na spravne misto a set "objednavky", ktera propojuje kazdeho zakaznika se vsemi jeho objednavkami.</body>
</comment>

<methods>
<class-id>Zakaznik</class-id> <category>accessing</category>

<body package="DaskalosUserClasses" selector="adresa">adresa
"generated by Daskalos"

     ^adresa</body>

<body package="DaskalosUserClasses" selector="adresa:">adresa: anObject
"generated by Daskalos"

     adresa := (self checkValue: anObject forVariable: #adresa)</body>

<body package="DaskalosUserClasses" selector="objednavky">objednavky
"generated by Daskalos"

     ^objednavky</body>
</methods>

<methods>
<class-id>Zakaznik</class-id> <category>instance initialization</category>

<body package="DaskalosUserClasses" selector="initialize">initialize
"generated by Daskalos"

     super initialize.
     adresa := nil.
     objednavky := Set new.
</body>
</methods>

<methods>
<class-id>Zakaznik</class-id> <category>other methods</category>

<body package="DaskalosUserClasses" selector="celeJmeno">celeJmeno
	^jmeno , ' ' , prijmeni</body>
</methods>


<class>
<name>Produkt</name>
<environment>Smalltalk</environment>
<super>DaskalosDataObject</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>cena popis nazev ean </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>DaskalosUserClasses</category>
<attributes>
<package>DaskalosUserClasses</package>
</attributes>
</class>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<methods>
<class-id>Produkt class</class-id> <category>instance variables behavior</category>

<body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes
"resource for Daskalos"
^((Core.Dictionary new) add: (#nazev -&gt; Core.String); add: (#cena -&gt; Core.Number); add: (#popis -&gt; Core.String); add: (#ean -&gt; Core.Number); yourself)</body>
</methods>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<comment>
<class-id>Produkt</class-id>
<body>Tato trida obsahuje kompletni info produktu:
	- v inst. prom. "cena" se nachazi cena jednotlivych instanci teto tridy (produktu)
	- v inst. prom. "popis" je podrobne popsan kazdy produkt
	- inst. prom. "nazev" je vyuzita pro pojmenovani kazdeho produktu
	- "ean" je inst. prom., ktera obsahuje hodnotu EANu kazdeho produktu</body>
</comment>

<methods>
<class-id>Produkt</class-id> <category>accessing</category>

<body package="DaskalosUserClasses" selector="cena">cena
"generated by Daskalos"

     ^cena</body>

<body package="DaskalosUserClasses" selector="cena:">cena: anObject
"generated by Daskalos"

     cena := (self checkValue: anObject forVariable: #cena)</body>

<body package="DaskalosUserClasses" selector="ean">ean
"generated by Daskalos"

     ^ean</body>

<body package="DaskalosUserClasses" selector="ean:">ean: anObject
"generated by Daskalos"

     ean := (self checkValue: anObject forVariable: #ean)</body>

<body package="DaskalosUserClasses" selector="nazev">nazev
"generated by Daskalos"

     ^nazev</body>

<body package="DaskalosUserClasses" selector="nazev:">nazev: anObject
"generated by Daskalos"

     nazev := (self checkValue: anObject forVariable: #nazev)</body>

<body package="DaskalosUserClasses" selector="popis">popis
"generated by Daskalos"

     ^popis</body>

<body package="DaskalosUserClasses" selector="popis:">popis: anObject
"generated by Daskalos"

     popis := (self checkValue: anObject forVariable: #popis)</body>
</methods>

<methods>
<class-id>Produkt</class-id> <category>instance initialization</category>

<body package="DaskalosUserClasses" selector="initialize">initialize
"generated by Daskalos"

     super initialize.
     cena := nil.
     popis := nil.
     nazev := nil.
     ean := nil.
</body>
</methods>


<class>
<name>Dopravce</name>
<environment>Smalltalk</environment>
<super>DaskalosDataObject</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>nazev dobaDoruceni cenaDopravy </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>DaskalosUserClasses</category>
<attributes>
<package>DaskalosUserClasses</package>
</attributes>
</class>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<methods>
<class-id>Dopravce class</class-id> <category>instance variables behavior</category>

<body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes
"resource for Daskalos"
^((Core.Dictionary new) add: (#nazev -&gt; Core.String); add: (#cenaDopravy -&gt; Core.Number); add: (#dobaDoruceni -&gt; Core.Number); yourself)</body>
</methods>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<comment>
<class-id>Dopravce</class-id>
<body>Tato trida obsahuje informace o dopravci:
	- inst. prom. "nazev" obsahuje nazvy jednotlivych instanci teto tridy (dopravcu)
	- isnt. prom. "dobaDoruceni" urcuje dobu doruceni ve dnech
	- inst. prom. "cenaDopravy" urcuje cenu dopravy jednotlivych dopravcu</body>
</comment>

<methods>
<class-id>Dopravce</class-id> <category>accessing</category>

<body package="DaskalosUserClasses" selector="cenaDopravy">cenaDopravy
"generated by Daskalos"

     ^cenaDopravy</body>

<body package="DaskalosUserClasses" selector="cenaDopravy:">cenaDopravy: anObject
"generated by Daskalos"

     cenaDopravy := (self checkValue: anObject forVariable: #cenaDopravy)</body>

<body package="DaskalosUserClasses" selector="dobaDoruceni">dobaDoruceni
"generated by Daskalos"

     ^dobaDoruceni</body>

<body package="DaskalosUserClasses" selector="dobaDoruceni:">dobaDoruceni: anObject
"generated by Daskalos"

     dobaDoruceni := (self checkValue: anObject forVariable: #dobaDoruceni)</body>

<body package="DaskalosUserClasses" selector="nazev">nazev
"generated by Daskalos"

     ^nazev</body>

<body package="DaskalosUserClasses" selector="nazev:">nazev: anObject
"generated by Daskalos"

     nazev := (self checkValue: anObject forVariable: #nazev)</body>
</methods>

<methods>
<class-id>Dopravce</class-id> <category>instance initialization</category>

<body package="DaskalosUserClasses" selector="initialize">initialize
"generated by Daskalos"

     super initialize.
     nazev := nil.
     dobaDoruceni := nil.
     cenaDopravy := nil.
</body>
</methods>


<class>
<name>Objednavka</name>
<environment>Smalltalk</environment>
<super>DaskalosDataObject</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>cislo produkty dopravce denObjednani </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>DaskalosUserClasses</category>
<attributes>
<package>DaskalosUserClasses</package>
</attributes>
</class>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<methods>
<class-id>Objednavka class</class-id> <category>instance variables behavior</category>

<body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes
"resource for Daskalos"
^((Core.Dictionary new) add: (#produkty -&gt; Core.Bag); add: (#denObjednani -&gt; Core.Date); add: (#cislo -&gt; Core.Number); add: (#dopravce -&gt; Core.Object); yourself)</body>
</methods>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<comment>
<class-id>Objednavka</class-id>
<body>Tato trida obsahuje kompletni data objednavky: 
	- inst. prom . "cislo" je cislo objednavky vyuzitelne pro dohledani jednotlivych instanci teto tridy (objednavek)
	- objekt "dopravce" propojuje asociaci objednavku s jednim vybranym dopravcem ktereho si zakaznik zvolil
	- bag "produkty" propojuje asociaci objednavku s kolekci produktu, ktere si zakaznik objednal
	- inst. prom. "denObjednani" je datum uzavreni objednavky, ktere je vyuzito v metode "denDoruceni" pri 	  kalkulaci dne, kdy ma byt objednavka dorucena
	- metoda "celkovaCena" scita celkovou cenu vsech produktu v jednotlivych instancich teto tridy a cene 	  doruceni ktera je zavisla na zvolenem dopravci</body>
</comment>

<methods>
<class-id>Objednavka</class-id> <category>accessing</category>

<body package="DaskalosUserClasses" selector="cislo">cislo
"generated by Daskalos"

     ^cislo</body>

<body package="DaskalosUserClasses" selector="cislo:">cislo: anObject
"generated by Daskalos"

     cislo := (self checkValue: anObject forVariable: #cislo)</body>

<body package="DaskalosUserClasses" selector="denObjednani">denObjednani
"generated by Daskalos"

     ^denObjednani</body>

<body package="DaskalosUserClasses" selector="denObjednani:">denObjednani: anObject
"generated by Daskalos"

     denObjednani := (self checkValue: anObject forVariable: #denObjednani)</body>

<body package="DaskalosUserClasses" selector="dopravce">dopravce
"generated by Daskalos"

     ^dopravce</body>

<body package="DaskalosUserClasses" selector="dopravce:">dopravce: anObject
"generated by Daskalos"

     dopravce := (self checkValue: anObject forVariable: #dopravce)</body>

<body package="DaskalosUserClasses" selector="produkty">produkty
"generated by Daskalos"

     ^produkty</body>
</methods>

<methods>
<class-id>Objednavka</class-id> <category>instance initialization</category>

<body package="DaskalosUserClasses" selector="initialize">initialize
"generated by Daskalos"

     super initialize.
     cislo := nil.
     produkty := Bag new.
     dopravce := nil.
     denObjednani := nil.
</body>
</methods>

<methods>
<class-id>Objednavka</class-id> <category>other methods</category>

<body package="DaskalosUserClasses" selector="celkovaCena">celkovaCena
	| cp sumCP |
	sumCP := 0.
	cp := produkty collect: [:prod | prod cena].
	cp do: [:cena | sumCP := sumCP + cena].
	^sumCP + dopravce cenaDopravy</body>

<body package="DaskalosUserClasses" selector="denDoruceni">denDoruceni
	^denObjednani addDays: dopravce dobaDoruceni</body>
</methods>


</st-source>
